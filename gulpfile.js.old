// ===========================================================================================================
// Gulp config file for Seed Wordpress Base theme
// Author: Ash Whiting
// Version: 0.4.5
// ===========================================================================================================

// ===========================================================================================================
// VARIABLES
// ===========================================================================================================

// ===========================================================================================================
// Global File paths
// ===========================================================================================================

var config = {
	uploadPath:					'../../uploads',
	nodePath:					'node_modules/',
	bowerPath:      			'bower/',
	bowerPathAll:  				'bower/**/*',
	jsPath:         			'library/js/',
	jsPathAll:     				'library/js/*.js',
	jsPathVendor:   			'library/js/vendor-libs/',
	temp:           			'library/temp',
	scssPath:       			'library/scss',
	scssPathAll:    			'library/scss/**/*.scss',
	imgPath:        			'build/images',
	destImg:        			'build/images/**/*.{gif,png,jpg,jpeg,svg}',
	dest:           			'build',
	destCss:        			'build/css',
	destJs:         			'build/js',
	modernizr:                  'library/js/modernizr',
};

// ===========================================================================================================
// Add the JS files here (these are compiled out from the bower directory and placed in the vendor_libs folder)
// Alternatively, just refer to the bower folders directly if you like
// Uncomment the ones we have already added if you need to use them
// ===========================================================================================================

var jsFileList = [
	config.bowerPath  	+ 'respond/src/respond.js',
	config.bowerPath 	+ 'bootstrap-sass/assets/javascripts/bootstrap.js',
	config.bowerPath	+ 'matchHeight/dist/jquery.matchHeight.js',
	config.bowerPath	+ 'slick-carousel/slick/slick.js',
	config.bowerPath	+ 'velocity/velocity.js',
	config.bowerPath	+ 'skrollr/src/skrollr.js',
	config.nodePath		+ 'simplelightbox/dist/simple-lightbox.js',
	config.bowerPath    + 'jquery-validation/dist/jquery.validate.js',
	config.bowerPath    + 'jquery-validation/dist/additional-methods.js',
	config.jsPath 		+ '/scripts.js',
	config.jsPath		+ '/acf-map/acf-map.js'
];

// Styles paths

var scssFilePaths = [
    //config.nodePath 		+ '@fortawesome/fontawesome-free/scss/fontawesome.scss',
];

var bootstrapPath = [
	config.bowerPath 		+ 'bootstrap-sass/assets/stylesheets/'
]

// ===========================================================================================================
// Load some Gulp plugins
// ===========================================================================================================

var gulpLoadPlugins = require('gulp-load-plugins');
var plugins = gulpLoadPlugins();
var gulp = require('gulp'); // Load the Gulp core
var runSequence = require('run-sequence'); // Load as this isn't gulp based
var buster = require('gulp-asset-hash'); // Load as this didn't work :P
var cssSelectorLimit = require('gulp-css-selector-limit');
var cleanCSS = require('gulp-clean-css');
var sourcemaps = require('gulp-sourcemaps');
var plumber = require('gulp-plumber');
var babel = require('gulp-babel');
var postcss = require('gulp-postcss');
var flexibility = require('postcss-flexibility');
var browserSync = require('browser-sync').create();

// Load all the other plugins by referring to package.json

// ===========================================================================================================
// TASKS
//
// Sequencing became necessary because we only want to lint scripts.js (not every script!)
//
// If there is a better solution then fill your boots
// ===========================================================================================================

gulp.task('default', function() {
	runSequence('styles', 'watch');
});


var onError = function (err) {
	console.log(err.toString());
	this.emit('end');
};

// Styles task
// ===========================================================================================================

gulp.task('styles', function () {
	return gulp.src([config.scssPath + '/styles.scss']) // Base scss include
		.pipe(sourcemaps.init())
		.pipe(plumber({
			errorHandler: reportError
		}))
		.pipe(plugins.sass({
			includePaths: bootstrapPath
		}))
		.pipe(plugins.autoprefixer('last 2 version', 'safari 5', 'ie 8', 'ie 9', 'opera 12.1', 'ios 6', 'android 4'))
		.pipe(plugins.rename('styles.min.css'))
		.pipe(plugins.cleanCss({compatibility: 'ie8'}))
		.pipe(sourcemaps.write('./maps'))
		.pipe(gulp.dest(config.destCss))
		.pipe(buster.hash({
			manifest: './build/manifest.json',
			template: '<%= name %>.<%= ext %>'
		}))
		.pipe(gulp.dest(config.destCss)
	
		)
});


// Scripts task
// ===========================================================================================================

gulp.task('scripts', function () {
	return gulp.src(jsFileList)
		.pipe(sourcemaps.init())
		.pipe(plumber({
			errorHandler: reportError
		}))
		.pipe(plugins.concat({
			path: config.destJs + '/scripts.js',
			cwd: ''
		}))
		.pipe(plugins.rename('scripts.min.js'))
		.pipe(plugins.uglify())
		.pipe(gulp.dest(config.destJs))
		.pipe(buster.hash({
			manifest: './build/manifest.json',
			template: '<%= name %>.<%= ext %>'
		}))
		.pipe(sourcemaps.write())
		.pipe(gulp.dest(config.destJs)

		)
});

// Linting task
// ===========================================================================================================

gulp.task('lint', function(){
	return gulp.src(config.jsPath + 'js/scripts.js')
		.pipe(plumber({
			errorHandler: reportError
		}))
		.pipe(plugins.jshint())
		.pipe(plugins.plumber(function(error) {
			errorHandler:reportError
		}))
		.pipe(plugins.jshint.reporter('default')
	
	)
});

// Modernizr task
// ===========================================================================================================


// Images task
// ===========================================================================================================

gulp.task('images', function () {
	return gulp.src('build/images/**/*.{gif,png,jpg,jpeg,svg}')
		.pipe(plugins.cache(plugins.imagemin({
			optimizationLevel: 3,
			progressive: false,
			interlaced: false
		})))
		.pipe(gulp.dest(config.imgPath))
});

gulp.task('images-uploads', function () {
	return gulp.src('../../uploads/**/*.{gif,png,jpg,jpeg,svg}')
		.pipe(plugins.cache(plugins.imagemin({
			optimizationLevel: 3,
			progressive: false,
			interlaced: false
		})))
		.pipe(gulp.dest(config.uploadPath))
});

// Watch task
// ===========================================================================================================

gulp.task('watch', function () {
	gulp.watch(config.scssPathAll,function(){
		//runSequence('styles','browser-sync')
		runSequence('styles')
	});
	gulp.watch(config.destImg, ['images']);
	gulp.watch(config.uploadPath, ['images-uploads']);

	// Run the scripts task in the correct sequence
});



// Bo Selector limit check (bless)
// ===========================================================================================================

gulp.task('selector', function(){
    return gulp.src('build/css/splitCSS/*.css')
        .pipe(cssSelectorLimit())
        .pipe(cssSelectorLimit.reporter('default'))
        .pipe(cssSelectorLimit.reporter('fail'));
});

gulp.task('bless', function() {
    gulp.src('build/css/styles.min.css')
        .pipe(plugins.bless({
			imports:false,
			cacheBuster:false
		}))
        .pipe(gulp.dest('build/css'));
});

gulp.task('minify-bless', function(){
	gulp.src('build/css/*.css')
		.pipe(cleanCSS({debug: true}, function(details) {
			console.log(details.name + ': ' + details.stats.originalSize);
			console.log(details.name + ': ' + details.stats.minifiedSize);
		}))

		.pipe(buster.hash({
			manifest: './build/manifest.json',
			template: '<%= name %>.<%= ext %>'
		}))
		.pipe(gulp.dest('build/css/'));
});

// ===========================================================================================================
// HELPER FUNCTIONS
// ===========================================================================================================

// Error reporter function

var reportError = function (error) {
    var lineNumber = (error.lineNumber) ? 'LINE ' + error.lineNumber + ' -- ' : '';

    var report = '';
    var chalk = plugins.util.colors.yellow.bgRed;

    report += chalk('ðŸ˜¢ ') + ' [' + error.plugin + ']\n';
    report += chalk('ðŸ˜¢ ') + ' ' + error.message + '\n\n';

    if (error.lineNumber) {
		report += chalk('LINE:') + ' ' + error.lineNumber + '\n';
	}

    if (error.fileName) {
		report += chalk('FILE:') + ' ' + error.fileName + '\n';
	}
    console.error(report);
	this.emit('end');
}
